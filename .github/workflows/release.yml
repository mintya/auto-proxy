name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1
  PKG_CONFIG_ALLOW_CROSS: 1
  OPENSSL_STATIC: true

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            platform: macos
            arch: x86_64
            use_cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            platform: macos
            arch: aarch64
            use_cross: false
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux
            arch: x86_64
            use_cross: false
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux
            arch: aarch64
            use_cross: true
          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            platform: windows
            arch: x86_64
            use_cross: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
        cache-on-failure: true

    - name: Install cross
      if: matrix.use_cross == true
      run: |
        cargo install cross --git https://github.com/cross-rs/cross
        
    - name: Set up cross-compilation environment
      if: matrix.use_cross == true
      run: |
        # 设置环境变量以避免OpenSSL依赖问题
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
        echo "OPENSSL_STATIC=true" >> $GITHUB_ENV

    - name: Update Cargo.toml version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "🏷️  Updating Cargo.toml version to $VERSION"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sed -i '' "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
          else
            sed -i "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
          fi
          echo "✅ Version updated in Cargo.toml"
        else
          echo "ℹ️  Not a tag build, keeping original version"
        fi
      shell: bash

    - name: Build binary
      run: |
        echo "🔨 Building for ${{ matrix.platform }}-${{ matrix.arch }}..."
    
        if [ "${{ matrix.use_cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi
    
        echo "✅ Build completed successfully"
      shell: bash


    - name: Run tests (native builds only)
      if: matrix.use_cross == false
      run: cargo test --release --target ${{ matrix.target }}

    - name: Strip binary (Unix only)
      if: runner.os != 'Windows'
      run: |
        BINARY_PATH="target/${{ matrix.target }}/release/auto-proxy"
        if [ -f "$BINARY_PATH" ]; then
          strip "$BINARY_PATH" || true
          echo "✅ Binary stripped"
        fi

    - name: Prepare release assets
      id: prepare
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        mkdir -p release

        BINARY_NAME="auto-proxy"
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          BINARY_NAME="auto-proxy.exe"
        fi

        BINARY_PATH="target/${{ matrix.target }}/release/$BINARY_NAME"
        if [ ! -f "$BINARY_PATH" ]; then
          echo "❌ Binary not found: $BINARY_PATH"
          exit 1
        fi
        
        cp "$BINARY_PATH" release/
        
        if [ -f "README.md" ]; then
          cp README.md release/
        fi
        if [ -f "LICENSE" ]; then
          cp LICENSE release/
        fi

        cd release
        ARCHIVE_NAME="auto-proxy-$VERSION-${{ matrix.platform }}-${{ matrix.arch }}"
        
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          ARCHIVE_FILE="$ARCHIVE_NAME.zip"
          7z a "$ARCHIVE_FILE" *
        else
          ARCHIVE_FILE="$ARCHIVE_NAME.tar.gz"
          tar -czf "$ARCHIVE_FILE" *
        fi
        
        echo "ARCHIVE_NAME=$ARCHIVE_FILE" >> $GITHUB_ENV
        echo "ARCHIVE_PATH=release/$ARCHIVE_FILE" >> $GITHUB_ENV
        echo "archive_name=$ARCHIVE_FILE" >> $GITHUB_OUTPUT

        ls -la
        echo "📦 Created archive: $ARCHIVE_FILE"
        
        if command -v du >/dev/null 2>&1; then
          echo "📊 Archive size: $(du -h "$ARCHIVE_FILE" | cut -f1)"
        fi
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.prepare.outputs.archive_name }}
        path: ${{ env.ARCHIVE_PATH }}
        retention-days: 7
        compression-level: 0

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
    
    - name: Run cargo audit
      run: |
        cargo install cargo-audit
        cargo audit

  release:
    name: Create Release
    needs: [build, security-audit]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        merge-multiple: true

    - name: Prepare release assets
      id: prepare
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV

        mkdir -p release-assets
        
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done

        echo "📦 Release assets:"
        ls -la release-assets/

        cd release-assets
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum * > SHA256SUMS
        elif command -v shasum >/dev/null 2>&1; then
          shasum -a 256 * > SHA256SUMS
        fi
        
        echo "✅ Generated checksums:"
        cat SHA256SUMS

    - name: Generate changelog
      id: changelog
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## 🔄 Changes since $PREV_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "## 🎉 Initial Release" > CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md

    - name: Generate release notes
      run: |
        cat > release-notes.md << EOF
        # Auto Proxy v${{ env.VERSION }}

        ## 🚀 新版本发布

        这是 Auto Proxy 的 v${{ env.VERSION }} 版本，一个支持多提供商的智能代理服务器。

        $(cat CHANGELOG.md)

        ## ✨ 主要特性

        - 🔄 **多提供商支持**: 配置多个API提供商，自动负载均衡
        - ⚖️ **智能负载均衡**: 轮询算法结合健康度权重，自动分散负载
        - 🏥 **健康度监控**: 实时追踪供应商健康状态，失败时自动降权
        - 🚀 **快速故障转移**: 不健康供应商自动跳过，确保服务连续性
        - 🚨 **紧急恢复模式**: 所有供应商下线时自动启动恢复机制
        - 🎯 **智能重试**: 根据健康度调整重试策略，减少无效请求
        - 🚦 **速率限制**: 可配置的每分钟请求限制，防止API过载
        - 🎮 **交互式界面**: 美观的实时终端UI界面，显示服务商状态和日志
        - 🖱️ **鼠标控制**: 支持鼠标点击操作，可随时启用/禁用服务商
        - 📊 **实时监控**: 显示健康度、速率限制、Token使用情况等实时数据
        - 🌐 **网络状态**: 实时网络连通性检测和状态显示
        - 🔒 **隐私保护**: 日志中自动屏蔽敏感的Token信息
        - 📈 **Token统计**: 实时统计各服务商的Token使用量和占比
        - ⚡ **高性能**: 基于Rust和Tokio的异步架构，使用rustls提供TLS支持
        - 🎨 **美观界面**: 彩色终端输出，提升用户体验
        - 🔧 **易于配置**: 简单的JSON配置文件
        - 🌍 **跨平台**: 支持 macOS、Linux 和 Windows

        ## 🎮 交互式界面

        本版本包含全新的交互式终端界面：
        - 📊 实时状态面板显示所有服务商状态
        - 🖱️ 鼠标点击操作，可随时启用/禁用服务商
        - ⌨️ 键盘快捷键支持 (Q/Esc退出，Ctrl+C强制退出)
        - 📋 彩色实时日志显示
        - 🌐 网络状态监控
        - 📈 Token使用统计

        ## 📦 下载

        请根据您的操作系统选择对应的版本：

        ### macOS
        - **Intel (x86_64)**: \`auto-proxy-${{ env.VERSION }}-macos-x86_64.tar.gz\`
        - **Apple Silicon (aarch64)**: \`auto-proxy-${{ env.VERSION }}-macos-aarch64.tar.gz\`

        ### Linux
        - **x86_64**: \`auto-proxy-${{ env.VERSION }}-linux-x86_64.tar.gz\`
        - **aarch64**: \`auto-proxy-${{ env.VERSION }}-linux-aarch64.tar.gz\`

        ### Windows
        - **x86_64**: \`auto-proxy-${{ env.VERSION }}-windows-x86_64.zip\`

        ## 🔧 快速安装

        ### Linux/macOS
        \`\`\`bash
        curl -L -o auto-proxy.tar.gz "https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}/auto-proxy-${{ env.VERSION }}-\$(uname -s | tr '[:upper:]' '[:lower:]')-\$(uname -m).tar.gz"
        tar -xzf auto-proxy.tar.gz
        chmod +x auto-proxy
        ./auto-proxy --help
        \`\`\`

        ### Windows
        下载 zip 文件并解压，然后运行 \`auto-proxy.exe --help\`

        ## 🚀 快速开始

        1. **启动程序**: \`./auto-proxy\` (使用交互式界面)
        2. **配置文件**: 首次运行会自动创建配置模板
        3. **编辑配置**: 在 \`~/.claude-proxy-manager/providers.json\` 中添加您的API提供商
        4. **重新启动**: 保存配置后重启程序即可使用

        ## 📋 校验和

        请使用 \`SHA256SUMS\` 文件验证下载文件的完整性：

        \`\`\`bash
        sha256sum -c SHA256SUMS
        \`\`\`

        ## 🐛 问题反馈

        如果您遇到任何问题，请在 [GitHub Issues](https://github.com/${{ github.repository }}/issues) 中反馈。

        ---
        
        感谢使用 Auto Proxy！如果此项目对您有帮助，请考虑给个 ⭐️！
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Auto Proxy v${{ env.VERSION }}
        body_path: release-notes.md
        files: |
          release-assets/*
        draft: false
        prerelease: ${{ contains(env.VERSION, 'alpha') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'rc') }}
        generate_release_notes: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to release summary
      run: |
        echo "🎉 Release v${{ env.VERSION }} created successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Assets uploaded:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -la release-assets/ >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ env.VERSION }})" >> $GITHUB_STEP_SUMMARY
