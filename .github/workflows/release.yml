name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配版本标签，如 v1.0.0
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            platform: macos
            arch: x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            platform: macos
            arch: aarch64
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux
            arch: x86_64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux
            arch: aarch64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools (Linux aarch64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-${{ matrix.target }}-

    - name: Build binary
      run: |
        echo "🔨 Building for ${{ matrix.platform }}-${{ matrix.arch }}..."
        cargo build --release --target ${{ matrix.target }}
        echo "✅ Build completed successfully"

    - name: Prepare release assets
      run: |
        # 获取版本号
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # 创建发布目录
        mkdir -p release
        
        # 确定二进制文件名
        BINARY_NAME="auto-proxy"
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          BINARY_NAME="auto-proxy.exe"
        fi
        
        # 复制二进制文件
        cp target/${{ matrix.target }}/release/$BINARY_NAME release/
        
        # 创建压缩包
        cd release
        ARCHIVE_NAME="auto-proxy-$VERSION-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz"
        tar -czf $ARCHIVE_NAME $BINARY_NAME
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "ARCHIVE_PATH=release/$ARCHIVE_NAME" >> $GITHUB_ENV
        
        # 显示文件信息
        ls -la
        echo "📦 Created archive: $ARCHIVE_NAME"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.ARCHIVE_PATH }}
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        # 获取版本号
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # 创建发布目录
        mkdir -p release-assets
        
        # 移动所有构建产物到发布目录
        find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
        
        # 显示发布资产
        echo "📦 Release assets:"
        ls -la release-assets/
        
        # 生成校验和
        cd release-assets
        sha256sum *.tar.gz > SHA256SUMS
        echo "✅ Generated checksums"
        cat SHA256SUMS

    - name: Generate release notes
      run: |
        cat > release-notes.md << 'EOF'
        # Auto Proxy v${{ env.VERSION }}
        
        ## 🚀 新版本发布
        
        这是 Auto Proxy 的 v${{ env.VERSION }} 版本，一个支持多提供商的智能代理服务器。
        
        ## ✨ 主要特性
        
        - 🔄 多提供商支持，自动重试和故障转移
        - 🎯 智能负载均衡
        - 🔒 Token 隐私保护
        - 📊 详细的日志输出
        - 🎨 美观的彩色界面
        
        ## 📦 下载
        
        请根据您的操作系统选择对应的版本：
        
        ### macOS
        - **Intel (x86_64)**: `auto-proxy-${{ env.VERSION }}-macos-x86_64.tar.gz`
        - **Apple Silicon (aarch64)**: `auto-proxy-${{ env.VERSION }}-macos-aarch64.tar.gz`
        
        ### Linux
        - **x86_64**: `auto-proxy-${{ env.VERSION }}-linux-x86_64.tar.gz`
        - **aarch64**: `auto-proxy-${{ env.VERSION }}-linux-aarch64.tar.gz`
        
        ## 🔧 安装方法
        
        1. 下载对应平台的压缩包
        2. 解压缩：`tar -xzf auto-proxy-${{ env.VERSION }}-<platform>-<arch>.tar.gz`
        3. 运行：`./auto-proxy --help`
        
        ## 📋 校验和
        
        请使用 `SHA256SUMS` 文件验证下载文件的完整性。
        
        ## 🐛 问题反馈
        
        如果您遇到任何问题，请在 [GitHub Issues](https://github.com/mintya/auto-proxy/issues) 中反馈。
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Auto Proxy v${{ env.VERSION }}
        body_path: release-notes.md
        files: |
          release-assets/*.tar.gz
          release-assets/SHA256SUMS
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to release
      run: |
        echo "🎉 Release v${{ env.VERSION }} created successfully!"
        echo "📦 Assets uploaded:"
        ls -la release-assets/